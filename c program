////Program to Display "Hello, World!"///
#include <stdio.h>
int main() {
   // printf() displays the string inside quotation
   printf("Hello, World!");
   return 0;
}
///Program to Print an Integer//
#include <stdio.h>
int main() {   
    int number;
   
    printf("Enter an integer: ");  
    
    // reads and stores input
    scanf("%d", &number);

    // displays output
    printf("You entered: %d", number);

//////Program to Check Even or Odd////////////
#include <stdio.h>
int main() {
    int num;
    printf("Enter an integer: ");
    scanf("%d", &num);

    // true if num is perfectly divisible by 2
    if(num % 2 == 0)
        printf("%d is even.", num);
    else
        printf("%d is odd.", num);
    
    return 0;
}

//////Simple Calculator using switch Statement///////
#include <stdio.h>

int main() {

  char op;
  double first, second;
  printf("Enter an operator (+, -, *, /): ");
  scanf("%c", &op);
  printf("Enter two operands: ");
  scanf("%lf %lf", &first, &second);

  switch (op) {
    case '+':
      printf("%.1lf + %.1lf = %.1lf", first, second, first + second);
      break;
    case '-':
      printf("%.1lf - %.1lf = %.1lf", first, second, first - second);
      break;
    case '*':
      printf("%.1lf * %.1lf = %.1lf", first, second, first * second);
      break;
    case '/':
      printf("%.1lf / %.1lf = %.1lf", first, second, first / second);
      break;
    // operator doesn't match any case constant
    default:
      printf("Error! operator is not correct");
  }

  return 0;
}


Check Armstrong Number of three digits
#include <stdio.h>
int main() {
    int num, originalNum, remainder, result = 0;
    printf("Enter a three-digit integer: ");
    scanf("%d", &num);
    originalNum = num;

    while (originalNum != 0) {
       // remainder contains the last digit
        remainder = originalNum % 10;
        
       result += remainder * remainder * remainder;
        
       // removing last digit from the orignal number
       originalNum /= 10;
    }

    if (result == num)
        printf("%d is an Armstrong number.", num);
    else
        printf("%d is not an Armstrong number.", num);

    return 0;
}

Display Prime Numbers Between Two Intervals
#include <stdio.h>

int main() {
   int low, high, i, flag;
   printf("Enter two numbers(intervals): ");
   scanf("%d %d", &low, &high);
   printf("Prime numbers between %d and %d are: ", low, high);

   // iteration until low is not equal to high
   while (low < high) {
      flag = 0;

      // ignore numbers less than 2
      if (low <= 1) {
         ++low;
         continue;
      }

      // if low is a non-prime number, flag will be 1
      for (i = 2; i <= low / 2; ++i) {

         if (low % i == 0) {
            flag = 1;
            break;
         }
      }

      if (flag == 0)
         printf("%d ", low);

      // to check prime for the next number
      // increase low by 1
      ++low;
   }

   return 0;
}


Sum of Natural Numbers Using Recursion
#include <stdio.h>

int addNumbers(int n);

int main() {

  int num;
  printf("Enter a positive integer: ");
  scanf("%d", &num);
  printf("Sum = %d", addNumbers(num));
  return 0;
}

int addNumbers(int n) {
  if (n != 0)
    return n + addNumbers(n - 1);
  else
    return n;
}

Program to Convert Decimal to Octal
#include <stdio.h>
#include <math.h>

// function prototype
int convertDecimalToOctal(int decimalNumber);

int main() {

    int decimalNumber;

    printf("Enter a decimal number: ");
    scanf("%d", &decimalNumber);

    printf("%d in decimal = %d in octal", decimalNumber, convertDecimalToOctal(decimalNumber));

    return 0;
}

// function to convert decimalNumber to octal
int convertDecimalToOctal(int decimalNumber) {
    int octalNumber = 0, i = 1;

    while (decimalNumber != 0) {
        octalNumber += (decimalNumber % 8) * i;
        decimalNumber /= 8;
        i *= 10;
    }

    return octalNumber;
}
Here is a concise example of a larger C program that demonstrates various concepts such as file handling, dynamic memory allocation, 
and linked lists. This program reads a list of student records from a file, stores them in a linked list, and allows the user to perform operations like adding, deleting, and displaying records.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Student {
    int id;
    char name[50];
    float grade;
    struct Student *next;
} Student;

Student* createStudent(int id, char *name, float grade) {
    Student *newStudent = (Student*)malloc(sizeof(Student));
    newStudent->id = id;
    strcpy(newStudent->name, name);
    newStudent->grade = grade;
    newStudent->next = NULL;
    return newStudent;
}

void addStudent(Student **head, int id, char *name, float grade) {
    Student *newStudent = createStudent(id, name, grade);
    newStudent->next = *head;
    *head = newStudent;
}

void deleteStudent(Student **head, int id) {
    Student *temp = *head, *prev = NULL;
    if (temp != NULL && temp->id == id) {
        *head = temp->next;
        free(temp);
        return;
    }
    while (temp != NULL && temp->id != id) {
        prev = temp;
        temp = temp->next;
    }
    if (temp == NULL) return;
    prev->next = temp->next;
    free(temp);
}

void displayStudents(Student *head) {
    Student *temp = head;
    while (temp != NULL) {
        printf("ID: %d, Name: %s, Grade: %.2f\n", temp->id, temp->name, temp->grade);
        temp = temp->next;
    }
}

void loadStudentsFromFile(Student **head, const char *filename) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        printf("Error opening file.\n");
        return;
    }
    int id;
    char name[50];
    float grade;
    while (fscanf(file, "%d %49s %f", &id, name, &grade) != EOF) {
        addStudent(head, id, name, grade);
    }
    fclose(file);
}

void saveStudentsToFile(Student *head, const char *filename) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file.\n");
        return;
    }
    Student *temp = head;
    while (temp != NULL) {
        fprintf(file, "%d %s %.2f\n", temp->id, temp->name, temp->grade);
        temp = temp->next;
    }
    fclose(file);
}

int main() {
    Student *head = NULL;
    loadStudentsFromFile(&head, "students.txt");

    int choice, id;
    char name[50];
    float grade;

    while (1) {
        printf("1. Add Student\n2. Delete Student\n3. Display Students\n4. Save and Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter ID, Name, Grade: ");
                scanf("%d %49s %f", &id, name, &grade);
                addStudent(&head, id, name, grade);
                break;
            case 2:
                printf("Enter ID to delete: ");
                scanf("%d", &id);
                deleteStudent(&head, id);
                break;
            case 3:
                displayStudents(head);
                break;
            case 4:
                saveStudentsToFile(head, "students.txt");
                exit(0);
            default:
                printf("Invalid choice.\n");
        }
    }

    return 0;
}
program of snake game

// C Program to implement Snake and Ladder Game 
#include <stdio.h> 
#include <stdlib.h> 
#include <time.h> 
// Function to roll a six-sided die 
int rollDie() { return rand() % 6 + 1; } 

// global variables to store postions of player1 and player2 
int player1 = 0, player2 = 0; 

// Function to print the board 
void printBoard() 
{ 
	// logic to print a snake-ladder Game board 
	// programmer can implement their own logic for the board, 
	// this is one way to print a snake ladder board. 
	int board[101]; 
	for (int i = 1; i <= 100; i++) { 
		board[i] = i; 
	} 

	int alt = 0; // to switch between the alternate nature of the board 
	int iterLR = 101; // iterator to print from left to right 
	int iterRL = 80; // iterator to print from right to left 
	int val = 100;	 
	while (val--) { 
		if (alt == 0) { 
			iterLR--; 
			if (iterLR == player1) { 
				printf("#P1 "); 
			} 
			else if (iterLR == player2) { 
				printf("#P2 "); 
			} 
			else
				printf("%d ", board[iterLR]); 

			if (iterLR % 10 == 1) { 
				printf("\n\n"); 
				alt = 1; 
				iterLR -= 10; 
			} 
		} 
		else { 
			iterRL++; 
			if (iterRL == player1) { 
				printf("#P1 "); 
			} 
			else if (iterRL == player2) { 
				printf("#P2 "); 
			} 
			else
				printf("%d ", board[iterRL]); 

			if (iterRL % 10 == 0) { 
				printf("\n\n"); 
				alt = 0; 
				iterRL -= 30; 
			} 
		} 
		if (iterRL == 10) 
			break; 
	} 
	printf("\n"); 
} 

// Function to move the player 
int movePlayer(int currentPlayer, int roll) 
{ 
	int newPosition = currentPlayer + roll; 
	// Define the positions of snakes and ladders on the 
	// board 
	int snakesAndLadders[101]; 

	for (int i = 0; i <= 100; i++) { 
		snakesAndLadders[i] = 0; 
	} 
	
	// here positive weights represent a ladder 
	// and negative weights represent a snake. 
	snakesAndLadders[6] = 40; 
	snakesAndLadders[23] = -10; 
	snakesAndLadders[45] = -7; 
	snakesAndLadders[61] = -18; 
	snakesAndLadders[65] = -8; 
	snakesAndLadders[77] = 5; 
	snakesAndLadders[98] = -10; 

	int newSquare 
		= newPosition + snakesAndLadders[newPosition]; 

	if (newSquare > 100) { 
		return currentPlayer; // Player cannot move beyond 
							// square 100 
	} 

	return newSquare; 
} 

int main() 
{ 
	srand(time(0)); // Initialize random seed 
	int currentPlayer = 1; 
	int won = 0; 

	printf("Snake and Ladder Game\n"); 

	while (!won) { 

		printf( 
			"\nPlayer %d, press Enter to roll the die...", 
			currentPlayer); 
		getchar(); // Wait for the player to press Enter 
		int roll = rollDie(); 
		printf("You rolled a %d.\n", roll); 

		if (currentPlayer == 1) { 
			player1 = movePlayer(player1, roll); 
			printf("Player 1 is now at square %d.\n\n", 
				player1); 
			printBoard(); 
			if (player1 == 100) { 
				printf("Player 1 wins!\n"); 
				won = 1; 
			} 
		} 
		else { 
			player2 = movePlayer(player2, roll); 
			printf("Player 2 is now at square %d.\n\n", 
				player2); 
			printBoard(); 
			if (player2 == 100) { 
				printf("Player 2 wins!\n"); 
				won = 1; 
			} 
		} 

		// Switch to the other player 
		currentPlayer = (currentPlayer == 1) ? 2 : 1; 
	} 

	return 0; 
}

// C program to print the month by month 
// calendar for the given year 

#include <stdio.h> 

// Function that returns the index of the 
// day for date DD/MM/YYYY 
int dayNumber(int day, int month, int year) 
{ 

    static int t[] = { 0, 3, 2, 5, 0, 3, 
                    5, 1, 4, 6, 2, 4 }; 
    year -= month < 3; 
    return (year + year / 4 
            - year / 100 
            + year / 400 
            + t[month - 1] + day) 
        % 7; 
} 

// Function that returns the name of the 
// month for the given month Number 
// January - 0, February - 1 and so on 
char* getMonthName(int monthNumber) 
{ 
    char* month; 

    switch (monthNumber) { 
    case 0: 
        month = "January"; 
        break; 
    case 1: 
        month = "February"; 
        break; 
    case 2: 
        month = "March"; 
        break; 
    case 3: 
        month = "April"; 
        break; 
    case 4: 
        month = "May"; 
        break; 
    case 5: 
        month = "June"; 
        break; 
    case 6: 
        month = "July"; 
        break; 
    case 7: 
        month = "August"; 
        break; 
    case 8: 
        month = "September"; 
        break; 
    case 9: 
        month = "October"; 
        break; 
    case 10: 
        month = "November"; 
        break; 
    case 11: 
        month = "December"; 
        break; 
    default:
        month = "Invalid"; // Warning: Improper usage of function can lead to undefined behavior.
        break;

    } 
    return month; 
} 

// Function to return the number of days 
// in a month 
int numberOfDays(int monthNumber, int year) 
{ 
    // January 
    if (monthNumber == 0) 
        return (31); 

    // February 
    if (monthNumber == 1) { 
        // If the year is leap then Feb 
        // has 29 days 
        if (year % 400 == 0 
            || (year % 4 == 0 
                && year % 100 != 0)) 
            return (29); 
        else
            return (28); 
    } 

    // March 
    if (monthNumber == 2) 
        return (31); 

    // April 
    if (monthNumber == 3) 
        return (30); 

    // May 
    if (monthNumber == 4) 
        return (31); 

    // June 
    if (monthNumber == 5) 
        return (30); 

    // July 
    if (monthNumber == 6) 
        return (31); 

    // August 
    if (monthNumber == 7) 
        return (31); 

    // September 
    if (monthNumber == 8) 
        return (30); 

    // October 
    if (monthNumber == 9) 
        return (31); 

    // November 
    if (monthNumber == 10) 
        return (30); 

    // December 
    if (monthNumber == 11) 
        return (31);
} 

// Function to print the calendar of 
// the given year 
void printCalendar(int year) 
{ 
    printf("     Calendar - %d\n\n", year); 
    int days; 

    // Index of the day from 0 to 6 
    int current = dayNumber(1, 1, year); 

    // i for Iterate through months 
    // j for Iterate through days 
    // of the month - i 
    for (int i = 0; i < 12; i++) { 
        days = numberOfDays(i, year); 

        // Print the current month name 
        printf("\n ------------%s-------------\n", 
            getMonthName(i)); 

        // Print the columns 
        printf(" Sun Mon Tue Wed Thu Fri Sat\n"); 

        // Print appropriate spaces 
        int k; 
        for (k = 0; k < current; k++) 
            printf("     "); 

        for (int j = 1; j <= days; j++) { 
            printf("%5d", j); 

            if (++k > 6) { 
                k = 0; 
                printf("\n"); 
            } 
        } 

        if (k) 
            printf("\n"); 

        current = k; 
    } 

    return; 
} 

// Driver Code 
int main() 
{ 
    int year = 2016; // Warning: For beginners, it may not be clear how to input a custom year.
                     // Suggest replacing this with a scanf() for user input.

    // Function Call 
    printCalendar(year); 
    return 0; 
}
